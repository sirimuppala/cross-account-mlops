AWSTemplateFormatVersion: 2010-09-09
Description: Sample spoke setup CloudFormation Template.(fdp-1oh0t5bfi)
Mappings:
  NetworkInfo:
    VPC:
      CIDR: '10.50.0.0/16'
    Subnet1:
      CIDR: '10.50.1.0/24'
    Subnet2:
      CIDR: '10.50.2.64/24'
    Subnet3:
      CIDR: '10.50.3.64/24'

Parameters:
  MasterPortfolioId:
    Description: >-
      SC Portfolio Id from the master account. Can be obtained from output of the tools account stack.
    Type: String
    Default: port-fillmeinpleas
  SagemakerProductID:
    Description: >-
      Sagemaker product ID on the master account. Can be obtained from output of the tools account stack.
    Type: String
    Default: prod-fillmeinpleas

Resources:
  AcceptedPortfolioShare:
    Type: 'AWS::ServiceCatalog::AcceptedPortfolioShare'
    Properties:
      AcceptLanguage: en
      PortfolioId: !Ref MasterPortfolioId

  AdministratorPortfolio:
    Type: 'AWS::ServiceCatalog::Portfolio'
    Properties:
      AcceptLanguage: en
      Description: This portfolio enables data scientists to ddeploy their services
      DisplayName: Spoke Data Scientists Portfolio
      ProviderName: CCOE
  
  PortfolioProductAssociation:
    Type: 'AWS::ServiceCatalog::PortfolioProductAssociation'
    DependsOn: AcceptedPortfolioShare
    Properties:
      AcceptLanguage: en
      PortfolioId: !Ref AdministratorPortfolio
      ProductId: !Ref SagemakerProductID
      SourcePortfolioId: !Ref MasterPortfolioId

  CostCenterTagOptionOne:
    Type: 'AWS::ServiceCatalog::TagOption'
    Properties:
      Key: cost-center
      Value: 8457

  CostCenterAdminPortfolioTagOptionOneAssociation:
    Type: 'AWS::ServiceCatalog::TagOptionAssociation'
    Properties:
      ResourceId: !Ref AdministratorPortfolio
      TagOptionId: !Ref CostCenterTagOptionOne

  CostCenterTagOptionTwo:
    Type: 'AWS::ServiceCatalog::TagOption'
    Properties:
      Key: cost-center
      Value: 6534

  CostCenterAdminPortfolioTagOptionTwoAssociation:
    Type: 'AWS::ServiceCatalog::TagOptionAssociation'
    Properties:
      ResourceId: !Ref AdministratorPortfolio
      TagOptionId: !Ref CostCenterTagOptionTwo

  SageMakerProductLaunchConstraint:
    Type: 'AWS::ServiceCatalog::LaunchRoleConstraint'
    DependsOn:
      - AdministratorPortfolio
      - SagemakerProductLaunchRole
    Properties:
      AcceptLanguage: en
      Description: >-
        This launch constraint ensures that analysts can launch Secure Sagemaker notebook
        without minimum permissions
      PortfolioId: !Ref AdministratorPortfolio
      ProductId: !Ref SagemakerProductID
      RoleArn: !GetAtt
        - SagemakerProductLaunchRole
        - Arn

  SagemakerProductLaunchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - servicecatalog.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Path: /
      Policies:
        - PolicyName: SCLaunchPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: SCLaunchPolicySID
                Effect: Allow
                Action:      
                  - "servicecatalog:ListServiceActionsForProvisioningArtifact"
                  - "servicecatalog:ExecuteprovisionedProductServiceAction"
                  - "iam:AddRoleToInstanceProfile"
                  - "iam:ListRolePolicies"
                  - "iam:ListPolicies"
                  - "iam:DeleteRole"
                  - "iam:GetRole"
                  - "iam:CreateInstanceProfile"
                  - "iam:PassRole"
                  - "iam:DeleteInstanceProfile"
                  - "iam:ListRoles"
                  - "iam:ListUsers"
                  - "iam:RemoveRoleFromInstanceProfile"
                  - "iam:CreateRole"
                  - "iam:DetachRolePolicy"
                  - "iam:AttachRolePolicy"   
                  - "kms:DescribeKey"
                  - "kms:GetKeyPolicy"
                  - "kms:GetKeyRotationStatus"
                  - "kms:GetPublicKey"
                  - "kms:ListKeys"
                  - "kms:ListAliases"
                  - "kms:ListKeyPolicies"                            
                  - "cloudformation:DescribeStackResource"
                  - "cloudformation:DescribeStackResources"
                  - "cloudformation:GetTemplate"
                  - "cloudformation:List*"
                  - "cloudformation:DescribeStackEvents"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:CreateStack"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:DescribeStackEvents"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:GetTemplateSummary"
                  - "cloudformation:SetStackPolicy"
                  - "cloudformation:ValidateTemplate"
                  - "cloudformation:UpdateStack"     
                  - "s3:GetObject"
                Resource: '*'

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['NetworkInfo', 'VPC', 'CIDR']

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['NetworkInfo', 'Subnet1', 'CIDR']
      MapPublicIpOnLaunch: true

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['NetworkInfo', 'Subnet2', 'CIDR']
      MapPublicIpOnLaunch: true

  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 2
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['NetworkInfo', 'Subnet3', 'CIDR']
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'

  DefaultGateway:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'

  Subnet1RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref PublicRouteTable

  Subnet2RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref PublicRouteTable

  Subnet3RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet3
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetAId:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Subnet for Funteam
      Name: funteam-subnetId
      Type: String
      Value: !Ref Subnet1

  PrivateSubnetBId:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Subnet for CoolTeam
      Name: coolteam-subnetId
      Type: String
      Value: !Ref Subnet2

  PrivateSubnetCId:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Subnet for SuperCoolers
      Name: supercoolers-subnetId
      Type: String
      Value: !Ref Subnet3

  VPCA:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Subnet for Funteam
      Name: funteam-vpc
      Type: String
      Value: !Ref VPC

  VPCB:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Subnet for CoolTeam
      Name: coolteam-vpc
      Type: String
      Value: !Ref VPC

  VPCC:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Subnet for SuperCoolers
      Name: supercoolers-vpc
      Type: String
      Value: !Ref VPC